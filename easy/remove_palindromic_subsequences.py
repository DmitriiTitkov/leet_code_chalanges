"""
You are given a string s consisting only of letters 'a' and 'b'. In a single
step you can remove one palindromic subsequence from s. Return the minimum
number of steps to make the given string empty. A string is a subsequence of a
given string if it is generated by deleting some characters of a given string
without changing its order. Note that a subsequence does not necessarily need
to be contiguous. A string is called palindrome if is one that reads the same
backward as well as forward.

Example 1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".

Constraints:
1 <= s.length <= 1000
s[i] is either 'a' or 'b'
"""
import pytest


class Solution:
    """
    As the palindrome doesn't have to be contiguous the amount of operation is
    1 or 2 since the string has only two letters.
    Time: O(n)
    Space: O(1)
    """
    def removePalindromeSub(self, s: str) -> int:
        l, r = 0, len(s) - 1

        while l < r:
            if s[l] != s[r]:
                return 2
            l += 1
            r -= 1
        return 1


@pytest.mark.parametrize(
    "s,expected_output",
    (
       ("ababa", 1),
       ("abb", 2),
       ("baabb", 2),
    )
)
def test_remove_palindrome_sub(s, expected_output):
    assert Solution().removePalindromeSub(s) == expected_output
